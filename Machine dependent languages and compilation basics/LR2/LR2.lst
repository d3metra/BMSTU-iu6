     1                                      section .data
     2 00000000 456E746572206D3A0A      prsM db "Enter m:", 10
     3                                  lenPrsM equ $-prsM
     4 00000009 456E74657220613A0A      prsA db "Enter a:", 10
     5                                  lenPrsA equ $-prsA
     6 00000012 526573756C743A0A        ExitMsg db "Result:", 10
     7                                  lenExit equ $-ExitMsg
     8                                  
     9                                      section .bss
    10 00000000 <res Ah>                InBuf resb 10
    11                                  lenIn equ $-InBuf
    12 0000000A <res Ah>                OutBuf resb 10
    13 00000014 ????                    a resw 1
    14 00000016 ????                    m resw 1
    15 00000018 ????                    b resw 1
    16 0000001A ????                    x resw 1
    17                                  
    18                                      section .text
    19                                      global _start
    20                                  _start:
    21                                      ; Enter m
    22 00000000 B801000000                  mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
    23 00000005 BF01000000                  mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    24 0000000A 48BE-                       mov rsi, prsM ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    24 0000000C [0000000000000000] 
    25 00000014 BA09000000                  mov rdx, lenPrsM ; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    26 00000019 0F05                        syscall  ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    27                                  
    28 0000001B B800000000                  mov rax, 0 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 0 (read)
    29 00000020 BF00000000                  mov rdi, 0 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdin=0
    30 00000025 48BE-                       mov rsi, InBuf ; Р°РґСЂРµСЃ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    30 00000027 [0000000000000000] 
    31 0000002F BA0A000000                  mov rdx, lenIn ; РґР»РёРЅР° РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    32 00000034 0F05                        syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    33                                  
    34 00000036 48BE-                       mov rsi, InBuf ; Р°РґСЂРµСЃ РІРІРµРґС‘РЅРЅРѕР№ СЃС‚СЂРѕРєРё
    34 00000038 [0000000000000000] 
    35 00000040 E865010000                  call StrToInt64 
    36 00000045 83FB00                      cmp ebx, 0 ; РїСЂРѕРІРµСЂРєР° РєРѕРґР° РѕС€РёР±РєРё
    37 00000048 0F85A6010000                jne StrToInt64.Error ; РїСЂРё РїСЂРµРѕР±СЂР°Р·РѕРІР°РЅРёРё РѕР±РЅР°СЂСѓР¶РµРЅР° РѕС€РёР±РєР°
    38 0000004E 66890425[16000000]          mov [m], ax ; Р·Р°РїРёСЃСЊ С‡РёСЃР»Р° РІ РїР°РјСЏС‚СЊ
    39                                  
    40                                      ; Enter a
    41 00000056 B801000000                  mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
    42 0000005B BF01000000                  mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    43 00000060 48BE-                       mov rsi, prsA ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    43 00000062 [0900000000000000] 
    44 0000006A BA09000000                  mov rdx, lenPrsA ; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    45 0000006F 0F05                        syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    46                                  
    47 00000071 B800000000                  mov rax, 0 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 0 (read)
    48 00000076 BF00000000                  mov rdi, 0 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdin=0
    49 0000007B 48BE-                       mov rsi, InBuf ; Р°РґСЂРµСЃ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    49 0000007D [0000000000000000] 
    50 00000085 BA0A000000                  mov rdx, lenIn ; РґР»РёРЅР° РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    51 0000008A 0F05                        syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    52                                  
    53 0000008C 48BE-                       mov rsi, InBuf ; Р°РґСЂРµСЃ РІРІРµРґС‘РЅРЅРѕР№ СЃС‚СЂРѕРєРё
    53 0000008E [0000000000000000] 
    54 00000096 E80F010000                  call StrToInt64
    55 0000009B 83FB00                      cmp ebx, 0 ; РїСЂРѕРІРµСЂРєР° РєРѕРґР° РѕС€РёР±РєРё
    56 0000009E 66890425[14000000]          mov [a], ax ; Р·Р°РїРёСЃСЊ С‡РёСЃР»Р° РІ РїР°РјСЏС‚СЊ
    57                                  
    58 000000A6 B800000000                  mov rax, 0
    59 000000AB B900000000                  mov rcx, 0
    60 000000B0 BA00000000                  mov rdx, 0
    61 000000B5 668B1425[16000000]          mov dx, [m] ; Р·Р°РіСЂСѓР·РєР° С‡РёСЃР»Р° РІ СЂРµРіРёСЃС‚СЂ
    62 000000BD 6683EA05                    sub dx, 5 ; m - 5
    63 000000C1 668B0425[16000000]          mov ax, [m] ; Р·Р°РіСЂСѓР·РєР° С‡РёСЃР»Р° РІ СЂРµРіРёСЃС‚СЂ
    64 000000C9 6683C002                    add ax, 2 ; m + 2
    65 000000CD 660FAFD0                    imul dx, ax ; (m - 5) * (m + 2)
    66 000000D1 66031425[16000000]          add dx, [m] ; (m - 5) * (m + 2) + m
    67 000000D9 6689D1                      mov cx, dx
    68 000000DC B800000000                  mov rax, 0
    69 000000E1 BA00000000                  mov rdx, 0
    70 000000E6 668B0425[14000000]          mov ax, [a] ; Р·Р°РіСЂСѓР·РєР° С‡РёСЃР»Р° РІ СЂРµРіРёСЃС‚СЂ
    71 000000EE 66BB0200                    mov bx, 2 ; Р·Р°РіСЂСѓР·РєР° С‡РёСЃР»Р° РІ СЂРµРіРёСЃС‚СЂ
    72 000000F2 6699                        cwd
    73 000000F4 66F7FB                      idiv bx ; a/2
    74 000000F7 6601C1                      add cx, ax ; (m - 5) * (m + 2) + m + a/2
    75 000000FA 66890C25[1A000000]          mov [x], cx ; Р·Р°РіСЂСѓР·РєР° СЂРµР·СѓР»СЊС‚Р°С‚Р° РІ РїР°РјСЏС‚СЊ
    76                                      
    77 00000102 B801000000                  mov rax, 1
    78 00000107 BF01000000                  mov rdi, 1
    79 0000010C 48BE-                       mov rsi, ExitMsg
    79 0000010E [1200000000000000] 
    80 00000116 BA08000000                  mov rdx, lenExit
    81 0000011B 0F05                        syscall
    82                                  
    83 0000011D 48BE-                       mov rsi, OutBuf
    83 0000011F [0A00000000000000] 
    84 00000127 668B0425[1A000000]          mov ax, [x]
    85 0000012F 98                          cwde
    86 00000130 E823000000                  call IntToStr64
    87 00000135 4889C2                      mov rdx, rax
    88 00000138 B801000000                  mov rax, 1 
    89 0000013D BF01000000                  mov rdi, 1 
    90 00000142 48BE-                       mov rsi, OutBuf 
    90 00000144 [0A00000000000000] 
    91 0000014C 0F05                        syscall
    92                                  
    93                                      ; exit
    94 0000014E B83C000000                  mov rax, 60 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 60 (exit)
    95 00000153 4831FF                      xor rdi, rdi ; return code 0
    96 00000156 0F05                        syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    97                                      
    98                                  %include "../lib64.asm"
    99                              <1>          section .text     ; сегмент кода
   100                              <1> IntToStr64: 
   101 00000158 57                  <1>          push   rdi
   102 00000159 53                  <1>          push   rbx
   103 0000015A 52                  <1>          push   rdx
   104 0000015B 51                  <1>          push   rcx
   105 0000015C 56                  <1> 		 push   rsi
   106 0000015D C60600              <1> 		 mov    byte[rsi],0 ; на место знака
   107 00000160 83F800              <1>          cmp    eax,0
   108 00000163 7D05                <1>          jge    .l1
   109 00000165 F7D8                <1>          neg    eax
   110 00000167 C6062D              <1>          mov    byte[rsi],'-'
   111 0000016A C646060A            <1> .l1      mov    byte[rsi+6],10
   112 0000016E BF05000000          <1>          mov    rdi,5
   113 00000173 66BB0A00            <1>          mov    bx,10
   114 00000177 6699                <1> .again:  cwd           ; расширили слово до двойного
   115 00000179 66F7F3              <1>          div    bx     ; делим результат на 10
   116 0000017C 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
   117 0000017F 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
   118 00000182 48FFCF              <1>          dec    rdi    ; переводим указатель на  
   119                              <1>                        ; предыдущую позицию
   120 00000185 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
   121 00000189 75EC                <1>          jne    .again
   122 0000018B B906000000          <1>          mov    rcx, 6
   123 00000190 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
   124 00000193 4889C8              <1> 		 mov    rax,rcx
   125 00000196 48FFC0              <1> 		 inc    rax    ; длина результата+OA
   126 00000199 48FFC6              <1>          inc    rsi    ; пропускаем знак
   127 0000019C 56                  <1> 		 push   rsi
   128 0000019D 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
   129 000001A1 5F                  <1> 		 pop    rdi
   130 000001A2 F3A4                <1>          rep movsb
   131 000001A4 5E                  <1>          pop    rsi  
   132 000001A5 59                  <1>          pop    rcx
   133 000001A6 5A                  <1>          pop    rdx
   134 000001A7 5B                  <1>          pop    rbx
   135 000001A8 5F                  <1>          pop    rdi
   136 000001A9 C3                  <1>          ret
   137                              <1> StrToInt64:
   138 000001AA 57                  <1>          push   rdi
   139 000001AB B739                <1>          mov    bh, '9'
   140 000001AD B330                <1>          mov    bl, '0'
   141 000001AF 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
   142 000001B0 803E2D              <1>          cmp    byte[rsi], '-'
   143 000001B3 7503                <1>          jne    .prod
   144 000001B5 48FFC6              <1>          inc    rsi     ; пропускаем знак
   145 000001B8 FC                  <1> .prod    cld
   146 000001B9 6631FF              <1>          xor    di, di  ; обнуляем будущее число
   147 000001BC AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
   148 000001BD 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
   149 000001BF 741F                <1>          je     .Return
   150 000001C1 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
   151 000001C3 722F                <1>          jb     .Error  ; "ниже" – Ошибка
   152 000001C5 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
   153 000001C7 772B                <1>          ja     .Error  ; "выше" – Ошибка
   154 000001C9 2C30                <1>          sub    al, 30h ; получаем цифру из символа
   155 000001CB 6698                <1>          cbw            ; расширяем до слова
   156 000001CD 6650                <1>          push   ax      ; сохраняем в стеке
   157 000001CF 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
   158 000001D3 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
   159 000001D6 665F                <1>          pop    di      ; в DI – очередная цифра
   160 000001D8 6601F8              <1>          add    ax, di
   161 000001DB 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
   162 000001DE EBDC                <1>          jmp    .cycle
   163 000001E0 5E                  <1> .Return: pop    rsi
   164 000001E1 BB00000000          <1>          mov    rbx, 0
   165 000001E6 803E2D              <1>          cmp    byte[rsi], '-'
   166 000001E9 7503                <1>          jne    .J
   167 000001EB 66F7DF              <1>          neg    di
   168 000001EE 6689F8              <1> .J       mov    ax, di
   169 000001F1 98                  <1>          cwde
   170 000001F2 EB0B                <1>          jmp    .R
   171 000001F4 5E                  <1> .Error:  pop    rsi
   172 000001F5 B800000000          <1>          mov    rax, 0
   173 000001FA BB01000000          <1>          mov    rbx, 1
   174 000001FF 5F                  <1> .R       pop    rdi
   175 00000200 C3                  <1>          ret
