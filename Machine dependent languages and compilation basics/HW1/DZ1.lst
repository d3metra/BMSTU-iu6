     1                                  %include "../lib64.asm"    
     2                              <1>          section .text     ; сегмент кода
     3                              <1> IntToStr64: 
     4 00000000 57                  <1>          push   rdi
     5 00000001 53                  <1>          push   rbx
     6 00000002 52                  <1>          push   rdx
     7 00000003 51                  <1>          push   rcx
     8 00000004 56                  <1> 		 push   rsi
     9 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
    10 00000008 83F800              <1>          cmp    eax,0
    11 0000000B 7D05                <1>          jge    .l1
    12 0000000D F7D8                <1>          neg    eax
    13 0000000F C6062D              <1>          mov    byte[rsi],'-'
    14 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    15 00000016 BF05000000          <1>          mov    rdi,5
    16 0000001B 66BB0A00            <1>          mov    bx,10
    17 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    18 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    19 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    20 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    21 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    22                              <1>                        ; предыдущую позицию
    23 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    24 00000031 75EC                <1>          jne    .again
    25 00000033 B906000000          <1>          mov    rcx, 6
    26 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    27 0000003B 4889C8              <1> 		 mov    rax,rcx
    28 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    29 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    30 00000044 56                  <1> 		 push   rsi
    31 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    32 00000049 5F                  <1> 		 pop    rdi
    33 0000004A F3A4                <1>          rep movsb
    34 0000004C 5E                  <1>          pop    rsi  
    35 0000004D 59                  <1>          pop    rcx
    36 0000004E 5A                  <1>          pop    rdx
    37 0000004F 5B                  <1>          pop    rbx
    38 00000050 5F                  <1>          pop    rdi
    39 00000051 C3                  <1>          ret
    40                              <1> StrToInt64:
    41 00000052 57                  <1>          push   rdi
    42 00000053 B739                <1>          mov    bh, '9'
    43 00000055 B330                <1>          mov    bl, '0'
    44 00000057 56                  <1>          push   rsi     ; сохран€ем адрес исходной строки
    45 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    46 0000005B 7503                <1>          jne    .prod
    47 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    48 00000060 FC                  <1> .prod    cld
    49 00000061 6631FF              <1>          xor    di, di  ; обнул€ем будущее число
    50 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    51 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    52 00000067 741F                <1>          je     .Return
    53 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нул€
    54 0000006B 722F                <1>          jb     .Error  ; "ниже" Ц ќшибка
    55 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом дев€ти 
    56 0000006F 772B                <1>          ja     .Error  ; "выше" Ц ќшибка
    57 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    58 00000073 6698                <1>          cbw            ; расшир€ем до слова
    59 00000075 6650                <1>          push   ax      ; сохран€ем в стеке
    60 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    61 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    62 0000007E 665F                <1>          pop    di      ; в DI Ц очередна€ цифра
    63 00000080 6601F8              <1>          add    ax, di
    64 00000083 6689C7              <1>          mov    di, ax  ; в DI Ц накопленное число        
    65 00000086 EBDC                <1>          jmp    .cycle
    66 00000088 5E                  <1> .Return: pop    rsi
    67 00000089 BB00000000          <1>          mov    rbx, 0
    68 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    69 00000091 7503                <1>          jne    .J
    70 00000093 66F7DF              <1>          neg    di
    71 00000096 6689F8              <1> .J       mov    ax, di
    72 00000099 98                  <1>          cwde
    73 0000009A EB0B                <1>          jmp    .R
    74 0000009C 5E                  <1> .Error:  pop    rsi
    75 0000009D B800000000          <1>          mov    rax, 0
    76 000000A2 BB01000000          <1>          mov    rbx, 1
    77 000000A7 5F                  <1> .R       pop    rdi
    78 000000A8 C3                  <1>          ret
     2                                  
     3                                      section .data
     4 00000000 456E74657220737472-     prsString db "Enter string:", 10
     4 00000009 696E673A0A         
     5                                  lenString equ $-prsString
     6 0000000E 20                      space db " "
     7 0000000F 4E756D626572206F66-     ExitMsg db "Number of words containing more than 3 characters:", 10
     7 00000018 20776F72647320636F-
     7 00000021 6E7461696E696E6720-
     7 0000002A 6D6F7265207468616E-
     7 00000033 203320636861726163-
     7 0000003C 746572733A0A       
     8                                  lenExit equ $-ExitMsg
     9                                  
    10                                      section .bss
    11 00000000 <res 23h>               InBuf resb 35
    12                                  lenIn equ $-InBuf
    13 00000023 ????                    OutBuf resb 2
    14                                  
    15                                      section .text
    16                                      global _start
    17                                  _start:
    18 000000A9 B801000000                  mov rax, 1
    19 000000AE BF01000000                  mov rdi, 1
    20 000000B3 48BE-                       mov rsi, prsString
    20 000000B5 [0000000000000000] 
    21 000000BD BA0E000000                  mov rdx, lenString
    22 000000C2 0F05                        syscall
    23                                      
    24 000000C4 B800000000                  mov rax, 0
    25 000000C9 BF00000000                  mov rdi, 0
    26 000000CE 48BE-                       mov rsi, InBuf
    26 000000D0 [0000000000000000] 
    27 000000D8 BA23000000                  mov rdx, lenIn
    28 000000DD 0F05                        syscall
    29                                  
    30 000000DF FC                          cld
    31 000000E0 488D3C25[00000000]          lea rdi, [InBuf]
    32 000000E8 B020                        mov al, " "
    33 000000EA 4831DB                      xor rbx, rbx
    34 000000ED B923000000                  mov rcx, lenIn
    35                                  cycle:
    36 000000F2 4889FA                      mov rdx, rdi
    37 000000F5 F2AE                        repne scasb
    38 000000F7 57                          push rdi
    39 000000F8 4829D7                      sub rdi, rdx
    40 000000FB 4883FF05                    cmp rdi, 5
    41 000000FF 7C03                        jl next
    42 00000101 48FFC3                      inc rbx
    43                                  next:
    44 00000104 5F                          pop rdi
    45 00000105 4883F900                    cmp rcx, 0
    46 00000109 75E7                        jne cycle
    47                                      
    48 0000010B B801000000                  mov rax, 1
    49 00000110 BF01000000                  mov rdi, 1
    50 00000115 48BE-                       mov rsi, ExitMsg
    50 00000117 [0F00000000000000] 
    51 0000011F BA33000000                  mov rdx, lenExit
    52 00000124 0F05                        syscall
    53                                      
    54 00000126 48BE-                       mov rsi, OutBuf
    54 00000128 [2300000000000000] 
    55 00000130 4889D8                      mov rax, rbx
    56 00000133 98                          cwde
    57 00000134 E8C7FEFFFF                  call IntToStr64
    58 00000139 4889C2                      mov rdx, rax
    59 0000013C B801000000                  mov rax, 1 
    60 00000141 BF01000000                  mov rdi, 1 
    61 00000146 48BE-                       mov rsi, OutBuf 
    61 00000148 [2300000000000000] 
    62 00000150 0F05                        syscall
    63                                  
    64 00000152 B83C000000                  mov rax, 60
    65 00000157 4831FF                      xor rdi, rdi
    66 0000015A 0F05                        syscall
