     1                                   section .data
     2 00000000 456E74657220613A0A      prsA db "Enter a:", 10
     3                                  lenPrsA equ $-prsA
     4 00000009 456E746572206B283C-     prsK db "Enter k(<> 0):", 10
     4 00000012 3E2030293A0A       
     5                                  lenPrsK equ $-prsK
     6 00000018 456E74657220783A0A      prsX db "Enter x:", 10
     7                                  lenPrsX equ $-prsX
     8 00000021 5661726E696E672120-     ErrorMsg db "Varning! Devision by zero!", 10, "k should be equal to 0", 10, 10
     8 0000002A 4465766973696F6E20-
     8 00000033 6279207A65726F210A-
     8 0000003C 6B2073686F756C6420-
     8 00000045 626520657175616C20-
     8 0000004E 746F20300A0A       
     9                                  lenError equ $-ErrorMsg
    10 00000054 526573756C743A0A        ExitMsg db "Result:", 10
    11                                  lenExit equ $-ExitMsg
    12                                  
    13                                      section .bss
    14 00000000 <res Ah>                InBuf resb 10
    15                                  lenIn equ $-InBuf
    16 0000000A <res Ah>                OutBuf resb 10
    17 00000014 ????                    a resw 1
    18 00000016 ????                    k resw 1
    19 00000018 ????                    x resw 1
    20 0000001A ????                    f resw 1
    21                                  
    22                                      section .text
    23                                      global _start
    24                                  _start:
    25                                      ; Enter a
    26 00000000 B801000000                  mov rax, 1 
    27 00000005 BF01000000                  mov rdi, 1 
    28 0000000A 48BE-                       mov rsi, prsA
    28 0000000C [0000000000000000] 
    29 00000014 BA09000000                  mov rdx, lenPrsA
    30 00000019 0F05                        syscall  
    31                                  
    32 0000001B B800000000                  mov rax, 0
    33 00000020 BF00000000                  mov rdi, 0
    34 00000025 48BE-                       mov rsi, InBuf
    34 00000027 [0000000000000000] 
    35 0000002F BA0A000000                  mov rdx, lenIn
    36 00000034 0F05                        syscall
    37                                  
    38 00000036 48BE-                       mov rsi, InBuf 
    38 00000038 [0000000000000000] 
    39 00000040 E8EE010000                  call StrToInt64 
    40 00000045 83FB00                      cmp ebx, 0
    41 00000048 0F852F020000                jne StrToInt64.Error 
    42 0000004E 66890425[14000000]          mov [a], ax
    43                                  
    44                                  writeK:
    45                                      ; Enter K
    46 00000056 B801000000                  mov rax, 1
    47 0000005B BF01000000                  mov rdi, 1
    48 00000060 48BE-                       mov rsi, prsK
    48 00000062 [0900000000000000] 
    49 0000006A BA0F000000                  mov rdx, lenPrsK
    50 0000006F 0F05                        syscall
    51                                  
    52 00000071 B800000000                  mov rax, 0
    53 00000076 BF00000000                  mov rdi, 0
    54 0000007B 48BE-                       mov rsi, InBuf
    54 0000007D [0000000000000000] 
    55 00000085 BA0A000000                  mov rdx, lenIn
    56 0000008A 0F05                        syscall
    57                                  
    58 0000008C 48BE-                       mov rsi, InBuf
    58 0000008E [0000000000000000] 
    59 00000096 E898010000                  call StrToInt64
    60 0000009B 83FB00                      cmp ebx, 0
    61 0000009E 0F85D9010000                jne StrToInt64.Error
    62 000000A4 6683F800                    cmp ax, 0
    63 000000A8 0F8413010000                je errorK
    64 000000AE 66890425[16000000]          mov [k], ax
    65                                  
    66 000000B6 668B0425[14000000]          mov ax, [a]
    67 000000BE 668B1425[16000000]          mov dx, [k]
    68 000000C6 66F7EA                      imul dx
    69 000000C9 6683F800                    cmp ax, 0
    70 000000CD 7E66                        JLE lessThanZero
    71 000000CF B801000000                  mov rax, 1
    72 000000D4 BF01000000                  mov rdi, 1
    73 000000D9 48BE-                       mov rsi, prsX
    73 000000DB [1800000000000000] 
    74 000000E3 BA09000000                  mov rdx, lenPrsX
    75 000000E8 0F05                        syscall
    76                                  
    77 000000EA B800000000                  mov rax, 0
    78 000000EF BF00000000                  mov rdi, 0
    79 000000F4 48BE-                       mov rsi, InBuf
    79 000000F6 [0000000000000000] 
    80 000000FE BA0A000000                  mov rdx, lenIn
    81 00000103 0F05                        syscall
    82                                      
    83 00000105 48BE-                       mov rsi, InBuf
    83 00000107 [0000000000000000] 
    84 0000010F E81F010000                  call StrToInt64
    85 00000114 83FB00                      cmp ebx, 0
    86 00000117 0F8560010000                jne StrToInt64.Error
    87 0000011D 6631D2                      xor dx, dx
    88 00000120 668B1425[14000000]          mov dx, [a]
    89 00000128 66F7EA                      imul dx
    90 0000012B 66890425[1A000000]          mov [f], ax
    91 00000133 EB36                        jmp continue
    92                                  
    93                                  lessThanZero:
    94 00000135 668B0C25[16000000]          mov cx, [k]
    95 0000013D 668B0425[14000000]          mov ax, [a]
    96 00000145 660FAFC8                    imul cx, ax
    97 00000149 6631C0                      xor ax, ax
    98 0000014C 6631D2                      xor dx, dx
    99 0000014F 66B87800                    mov ax, 120
   100 00000153 668B1C25[16000000]          mov bx, [k]
   101 0000015B 6699                        cwd
   102 0000015D 66F7FB                      idiv bx
   103 00000160 6601C1                      add cx, ax
   104 00000163 66890C25[1A000000]          mov [f], cx    
   105                                  
   106                                  continue:
   107 0000016B B801000000                  mov rax, 1
   108 00000170 BF01000000                  mov rdi, 1
   109 00000175 48BE-                       mov rsi, ExitMsg
   109 00000177 [5400000000000000] 
   110 0000017F BA08000000                  mov rdx, lenExit
   111 00000184 0F05                        syscall
   112                                      
   113 00000186 48BE-                       mov rsi, OutBuf
   113 00000188 [0A00000000000000] 
   114 00000190 668B0425[1A000000]          mov ax, [f]
   115 00000198 98                          cwde
   116 00000199 E843000000                  call IntToStr64
   117 0000019E 4889C2                      mov rdx, rax
   118 000001A1 B801000000                  mov rax, 1 
   119 000001A6 BF01000000                  mov rdi, 1 
   120 000001AB 48BE-                       mov rsi, OutBuf 
   120 000001AD [0A00000000000000] 
   121 000001B5 0F05                        syscall
   122                                      
   123                                  
   124                                  ; exit
   125 000001B7 B83C000000                  mov rax, 60
   126 000001BC 4831FF                      xor rdi, rdi
   127 000001BF 0F05                        syscall
   128                                  
   129                                  errorK:
   130 000001C1 B801000000                  mov rax, 1
   131 000001C6 BF01000000                  mov rdi, 1
   132 000001CB 48BE-                       mov rsi, ErrorMsg
   132 000001CD [2100000000000000] 
   133 000001D5 BA33000000                  mov rdx, lenError
   134 000001DA 0F05                        syscall
   135 000001DC E975FEFFFF                  jmp writeK
   136                                  
   137                                  %include "../lib64.asm"
   138                              <1>          section .text     ; сегмент кода
   139                              <1> IntToStr64: 
   140 000001E1 57                  <1>          push   rdi
   141 000001E2 53                  <1>          push   rbx
   142 000001E3 52                  <1>          push   rdx
   143 000001E4 51                  <1>          push   rcx
   144 000001E5 56                  <1> 		 push   rsi
   145 000001E6 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
   146 000001E9 83F800              <1>          cmp    eax,0
   147 000001EC 7D05                <1>          jge    .l1
   148 000001EE F7D8                <1>          neg    eax
   149 000001F0 C6062D              <1>          mov    byte[rsi],'-'
   150 000001F3 C646060A            <1> .l1      mov    byte[rsi+6],10
   151 000001F7 BF05000000          <1>          mov    rdi,5
   152 000001FC 66BB0A00            <1>          mov    bx,10
   153 00000200 6699                <1> .again:  cwd           ; расширили слово до двойного
   154 00000202 66F7F3              <1>          div    bx     ; делим результат на 10
   155 00000205 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
   156 00000208 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
   157 0000020B 48FFCF              <1>          dec    rdi    ; переводим указатель на  
   158                              <1>                        ; предыдущую позицию
   159 0000020E 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
   160 00000212 75EC                <1>          jne    .again
   161 00000214 B906000000          <1>          mov    rcx, 6
   162 00000219 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
   163 0000021C 4889C8              <1> 		 mov    rax,rcx
   164 0000021F 48FFC0              <1> 		 inc    rax    ; длина результата+OA
   165 00000222 48FFC6              <1>          inc    rsi    ; пропускаем знак
   166 00000225 56                  <1> 		 push   rsi
   167 00000226 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
   168 0000022A 5F                  <1> 		 pop    rdi
   169 0000022B F3A4                <1>          rep movsb
   170 0000022D 5E                  <1>          pop    rsi  
   171 0000022E 59                  <1>          pop    rcx
   172 0000022F 5A                  <1>          pop    rdx
   173 00000230 5B                  <1>          pop    rbx
   174 00000231 5F                  <1>          pop    rdi
   175 00000232 C3                  <1>          ret
   176                              <1> StrToInt64:
   177 00000233 57                  <1>          push   rdi
   178 00000234 B739                <1>          mov    bh, '9'
   179 00000236 B330                <1>          mov    bl, '0'
   180 00000238 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
   181 00000239 803E2D              <1>          cmp    byte[rsi], '-'
   182 0000023C 7503                <1>          jne    .prod
   183 0000023E 48FFC6              <1>          inc    rsi     ; пропускаем знак
   184 00000241 FC                  <1> .prod    cld
   185 00000242 6631FF              <1>          xor    di, di  ; обнуляем будущее число
   186 00000245 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
   187 00000246 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
   188 00000248 741F                <1>          je     .Return
   189 0000024A 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
   190 0000024C 722F                <1>          jb     .Error  ; "ниже" – Ошибка
   191 0000024E 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
   192 00000250 772B                <1>          ja     .Error  ; "выше" – Ошибка
   193 00000252 2C30                <1>          sub    al, 30h ; получаем цифру из символа
   194 00000254 6698                <1>          cbw            ; расширяем до слова
   195 00000256 6650                <1>          push   ax      ; сохраняем в стеке
   196 00000258 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
   197 0000025C 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
   198 0000025F 665F                <1>          pop    di      ; в DI – очередная цифра
   199 00000261 6601F8              <1>          add    ax, di
   200 00000264 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
   201 00000267 EBDC                <1>          jmp    .cycle
   202 00000269 5E                  <1> .Return: pop    rsi
   203 0000026A BB00000000          <1>          mov    rbx, 0
   204 0000026F 803E2D              <1>          cmp    byte[rsi], '-'
   205 00000272 7503                <1>          jne    .J
   206 00000274 66F7DF              <1>          neg    di
   207 00000277 6689F8              <1> .J       mov    ax, di
   208 0000027A 98                  <1>          cwde
   209 0000027B EB0B                <1>          jmp    .R
   210 0000027D 5E                  <1> .Error:  pop    rsi
   211 0000027E B800000000          <1>          mov    rax, 0
   212 00000283 BB01000000          <1>          mov    rbx, 1
   213 00000288 5F                  <1> .R       pop    rdi
   214 00000289 C3                  <1>          ret
